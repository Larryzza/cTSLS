// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// H_mat_cpp
arma::mat H_mat_cpp(const arma::vec& Y, const arma::vec& knots, const arma::vec& dt, const arma::vec& Sc);
RcppExport SEXP _cTSLS_H_mat_cpp(SEXP YSEXP, SEXP knotsSEXP, SEXP dtSEXP, SEXP ScSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Sc(ScSEXP);
    rcpp_result_gen = Rcpp::wrap(H_mat_cpp(Y, knots, dt, Sc));
    return rcpp_result_gen;
END_RCPP
}
// add_term_cpp2
arma::vec add_term_cpp2(const arma::vec& yhat, const arma::vec& tgrid, const arma::vec& cumK, const arma::vec& Pk_dt, const arma::vec& Kvals, const bool tail_ok);
RcppExport SEXP _cTSLS_add_term_cpp2(SEXP yhatSEXP, SEXP tgridSEXP, SEXP cumKSEXP, SEXP Pk_dtSEXP, SEXP KvalsSEXP, SEXP tail_okSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yhat(yhatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tgrid(tgridSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type cumK(cumKSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Pk_dt(Pk_dtSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Kvals(KvalsSEXP);
    Rcpp::traits::input_parameter< const bool >::type tail_ok(tail_okSEXP);
    rcpp_result_gen = Rcpp::wrap(add_term_cpp2(yhat, tgrid, cumK, Pk_dt, Kvals, tail_ok));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cTSLS_H_mat_cpp", (DL_FUNC) &_cTSLS_H_mat_cpp, 4},
    {"_cTSLS_add_term_cpp2", (DL_FUNC) &_cTSLS_add_term_cpp2, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_cTSLS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
